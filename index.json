[{"categories":null,"content":"Um problema comum é como compartilhar Jupyter Notebooks com usuários não-técnicos. Das várias soluções disponíveis, a que achei mais simples até o momento é exportar os notebooks como html usando o nbconvert. O formato html é interessante pois com ele é possível preservar conteúdo interativo, como os gráficos gerados pelo plotly, por exemplo. Para utilizar o nbconvert, basta usar o comando jupyter nbconvert \u003cpath-to-notebook\u003e --to html É possível customizar o template utilizado para fazer a conversão. Podemos, por exemplo, adicionar uma logomarca no cabeçalho dos notebooks e um texto padrão de rodapé. Dica As instruções a seguir se aplicam para versão do 6.0.7 ou superior Vamos criar um novo template e adicionar as modificações. Criar uma pasta com o nome desejado do template, em nosso exemplo \u003ctemplate-name\u003e. Essa pasta deve estar dentro de um dos diretórios esperados pelo nbconvert. Para consultar os diretórios permitidos, usar o comando: jupyter --paths Em meu caso, escolhi ~/miniconda3/envs/\u003cenv-name\u003e/share/jupyter/nbconvert/templates. Criar dois arquivos dentro dessa pasta: conf.json e index.html.j2. O arquivo conf.json: { \"base_template\": \"lab\", \"mimetypes\": { \"text/html\": true }, \"preprocessors\": { \"100-pygments\": { \"type\": \"nbconvert.preprocessors.CSSHTMLHeaderPreprocessor\", \"enabled\": true } } } O significado desse arquivo é que estamos usando como base o template chamado lab. O que faremos será apenas adicionar conteúdo a esse template. O arquivo index.html.j2 trata-se de um template jinja. Abaixo um exemplo de arquivo que adiciona uma logomarca no cabeçalho da página. Note que a imagem está codificada em base64. Nesse template também podemos adicionar estilos css à página. No exemplo adicionamos uma linha na lateral esquerda das células de texto, para dar mais destaque a elas em meio às células de código. {%- extends 'lab/index.html.j2' -%} {%- block html_head_css -%} {{ super() }} \u003cstyle\u003e .header { overflow: hidden; padding-top: 20%; } .jp-Notebook{ overflow: auto; background-image: url(data:\u003cconteúdo-da-imagem\u003e); background-repeat: no-repeat; height: 200px; width: auto; background-position: left; background-size: 100%; } /* Overrides of notebook CSS for static HTML export */ .jp-MarkdownOutput { margin-top:-2px; margin-bottom:-2px; padding-top:2px; padding-bottom:2px; border-left:2px solid #e1dcdc; border-collapse:collapse; border-top:none; border-bottom:none; } .custom-footer{ display: block; margin-left: auto; margin-right: auto; text-align: center; font-size: x-small; } \u003c/style\u003e {%- endblock html_head_css -%} {% block body_header %} \u003cbody class=\"jp-Notebook theme-light\" style=\"padding: 0; margin: 0;\"\u003e \u003cdiv class=\"header\"\u003e \u003c/div\u003e \u003cdiv style=\"padding: 20px; margin: 20px;\"\u003e {% endblock body_header %} {% block body_footer %} \u003c!-- \u003c/div\u003e --\u003e \u003cdiv class=\"custom-footer\"\u003e \u003chr\u003e \u003cp\u003eEste documento é propriedade de XYZ.\u003c/p\u003e \u003c/div\u003e \u003c/div\u003e \u003c/body\u003e {% endblock body_footer %} Depois de tudo configurado, basta usar: jupyter nbconvert \u003cpath-to-notebook\u003e --to html --template \u003ctemplate-name\u003e ","date":"2021-04-10","objectID":"/como-produzir-um-relat%C3%B3rio-a-partir-de-um-jupyter-notebook/:0:0","tags":["python","jupyter","nbconvert"],"title":"Como produzir um relatório a partir de um Jupyter Notebook","uri":"/como-produzir-um-relat%C3%B3rio-a-partir-de-um-jupyter-notebook/"},{"categories":null,"content":"Minha entrada no mundo da programação se iniciou com o Matlab durante a faculdade. O mesmo acontece com boa parte dos engenheiros mecânicos, eletricistas ou civis (basicamente qualquer engenharia que não as de software e computação). A transição para python ocorreu após a universidade, quando busquei estudar o que era ciência de dados e machine learning. Hoje uso python também nas tarefas de engenharia, pois se mostrou um ambiente muito mais flexível e produtivo que o Matlab, com a vantagem adicional de ser open-source. A curva de aprendizado para chegar em um nível em que você realmente é produtivo ao escrever código foi um pouco longa. O intuito dessa série de textos é mostrar alguns tópicos importantes nessa jornada, para que talvez a sua seja mais rápida. ","date":"2021-03-07","objectID":"/transi%C3%A7%C3%A3o-do-matlab-para-python/:0:0","tags":["python"],"title":"Transição do Matlab para Python","uri":"/transi%C3%A7%C3%A3o-do-matlab-para-python/"},{"categories":null,"content":"Bibliotecas Uma das principais diferenças é que o ecossistema de python é fragmentado em bibliotecas. Cada biblioteca deverá ser instalada separadamente e importada no início da excução do código. Além disso, cada uma terá uma uma documentação própria, que pode variar em qualidade. No caso do Matlab todas as funções tem uma documentação consistente, que pode ser acessada diretamente da própria IDE. As bibliotecas necessárias para desempenhar as tarefas mais comuns se você vem de um background de engenharia são: Numpy: álgebra linear Scipy: computação numérica (integração, interpolação e otimização, processamento de sinais e outros) matplotlib: gráficos statsmodels: estatística pandas: funções de dataframes (equivalentes às Tables do matlab), importação de arquivos de texto e excel simpy: matemática simbólica Como a comunidade é muito grande certamente existem bibliotecas prontas para uma necessidade muito específica. Exemplos: uncertainties: lida com cálculos de incerteza e propagação de erros trusspy : análise estrutural de treliças Tais recursos não são encontrados no Matlab ou suas toolboxes e podem ser um tremendo diferencial no aumento da produtividade de algumas tarefas. ","date":"2021-03-07","objectID":"/transi%C3%A7%C3%A3o-do-matlab-para-python/:1:0","tags":["python"],"title":"Transição do Matlab para Python","uri":"/transi%C3%A7%C3%A3o-do-matlab-para-python/"},{"categories":null,"content":"Instalação de bibliotecas Em todo tutorial você verá pip install \u003cnome da biblioteca\u003e Não instale bibliotecas dessa forma se você instalou seu ambiente python usando o Anaconda. Substitua por conda install \u003cnome da biblioteca\u003e Conda e pip são dois gerenciadores de pacotes distintos. Caso você utilize ambos simultaneamente você terá mais dificuldades em recriar o seu ambiente, além de estar mais sujeito à conflitos de versões. Essa “bagunça” de ambientes é a principal responsável do problema de um código executar sem problemas em uma máquina e não executa em outra. Quando se deparar com esse problema a primeira providência é garantir que as bibliotecas necessárias para a execução do código sejam as mesmas em ambas as máquinas (leia sobre conda environments para saber como fazer isso). ","date":"2021-03-07","objectID":"/transi%C3%A7%C3%A3o-do-matlab-para-python/:2:0","tags":["python"],"title":"Transição do Matlab para Python","uri":"/transi%C3%A7%C3%A3o-do-matlab-para-python/"},{"categories":null,"content":"Organização e escrita do código Uma das coisas que mais me incomodava no matlab era a impossibilidade de agrupar mais de uma função no mesmo arquivo de texto. Como resultado em algumas situações haviam dezenas de arquivos, muitas vezes com funções muito parecidas. Em python não existe esse problema. Escreva suas funções em quantos arquivos de texto quiser. Para chamá-las, em outro arquivo, basta fazer uma importação. Digamos que você queira importar todo o conteúdo de um script chamado “utils”, localizado dentro da pasta “lib”. Basta fazer: import lib.utils as utils Para as importações funcionarem é necessário criar um arquivo de nome __init__.py dentro da pasta lib. Esse arquivo pode ser vazio, ou possuir algum código, que será executado no momento da importação. O caminho que você indicar para a importação do seu script é relativo a onde o processo do python está sendo executado. Para saber onde “está” o interpretador, faça: import os os.cwd() # cwd = current working directory Caso se depare com algum erro durante a importação dos seus próprios scripts, leia sobre absolute e relative imports. ","date":"2021-03-07","objectID":"/transi%C3%A7%C3%A3o-do-matlab-para-python/:3:0","tags":["python"],"title":"Transição do Matlab para Python","uri":"/transi%C3%A7%C3%A3o-do-matlab-para-python/"},{"categories":null,"content":"Modo de uso Existem duas “formas de usar” python: utilizando Jupyter Notebooks (equivalente ao Live Editor do Matlab) ou escrevendo e executando scripts. Jupyter Notebooks é uma interface não apenas para executar python, mas outras linguagens também. Como vantagem é uma experiência de uso mais natural, principalmente se a tarefa é gerar gráficos e analisar dados, e a possibilidade de misturar texto, imagens e equações com código, facilitando o compartilhamento com usuários não técnicos. A grande desvantagem é a impossibilidade de debugar o código, isto é, não há como “pausar” a execução do código na ocorrência de um erro para facilitar entender o que deu errado. Nesses casos uma alternativa é converter o jupyter notebook em um script comum e debugar o script. ","date":"2021-03-07","objectID":"/transi%C3%A7%C3%A3o-do-matlab-para-python/:4:0","tags":["python"],"title":"Transição do Matlab para Python","uri":"/transi%C3%A7%C3%A3o-do-matlab-para-python/"},{"categories":null,"content":"if __init__ == “__name__\": Você verá esse trecho de código em vários lugares. A função dele é verificar “onde” está ocorrendo a execuçao do código: se você está executando o script o resultado da condição é True. Caso outro arquivo chame a execução do script, a condição é False. Um uso interessante é para você fazer pequenos testes com as funções escritas no seu script. Exemplo: def func1(x,y): return x + y def func2(x,y): return x*y if __init__ == \"__name__\": 5 == func1(2,3) 8 == func2(2,3) Ao ser executado, esse script retorna True, True ","date":"2021-03-07","objectID":"/transi%C3%A7%C3%A3o-do-matlab-para-python/:5:0","tags":["python"],"title":"Transição do Matlab para Python","uri":"/transi%C3%A7%C3%A3o-do-matlab-para-python/"},{"categories":null,"content":"IDE Minha recomendação de IDE é o VS Code. O VS Code é um editor de texto básico, que pode ter suas funcionalidades estendidas através de extensões, podendo assim ser transformado em uma IDE completa. Para isso instale a extensão Python e estará pronto para uso. Um dos recursos mais interessantes é o suporte nativo aos Jupyter Notebooks, não sendo necessário trocar a interface para usá-los. Tem alguma dúvida? Lembra de algum tópico que demorou para enteder? Escreva nos comentários. ","date":"2021-03-07","objectID":"/transi%C3%A7%C3%A3o-do-matlab-para-python/:6:0","tags":["python"],"title":"Transição do Matlab para Python","uri":"/transi%C3%A7%C3%A3o-do-matlab-para-python/"},{"categories":null,"content":"Aprenda a ligar e desligar uma máquina virtual do Compute Engine sem precisar entrar no console do Google Cloud.","date":"2020-08-02","objectID":"/ligar-desligar-instancia-compute-engine-link/","tags":["Google Cloud"],"title":"Ligar e desligar instâncias do Google Compute Engine através de um link","uri":"/ligar-desligar-instancia-compute-engine-link/"},{"categories":null,"content":"Motivação Sempre achei a interface do console do Google Cloud terrivelmente lenta. Em um projeto recente havia a necessidade de ligar e desligar constantemente uma máquina virtual, além de ativar/desativar regras de firewall. A quantidade de vezes em que via a tela de carregamento da interface no console já foi motivação suficiente para tentar automatizar essa tarefa. Tela de carregamento do Google Cloud A solução encontrada foi fazer uma Cloud Function ativada por um request http (ou um link) que liga/desliga uma determinada máquina. Inicialmente procurei por uma solução mais simples, em que não fosse necessário nenhum tipo de código. Caso alguém conheça uma forma mais simples de fazer a mesma tarefa, por favor se manifeste nos comentários. O código das funções pode ser visto em meu Github. ","date":"2020-08-02","objectID":"/ligar-desligar-instancia-compute-engine-link/:1:0","tags":["Google Cloud"],"title":"Ligar e desligar instâncias do Google Compute Engine através de um link","uri":"/ligar-desligar-instancia-compute-engine-link/"},{"categories":null,"content":"Criar nova conta de serviço A conta de serviço é utilizada pela Cloud Function para interagir com os outros serviços do Google Cloud. Ela deve ter os privilégios suficientes para realizar as tarefas que a função precisa executar. Procure pelo item IAM - Admin no Cloud Console, vá para contas de serviço e crie uma nova. Caminho para criar a conta de serviço Dê um nome e uma descrição para conta e vá para o próximo passo. Defina um papel adequado para a conta. O papel é o que determina o que os serviços que usam essa conta podem ou não podem fazer. Como no caso pretendemos modificar configurações do Compute Engine, sugiro o papel Compute Admin. Selecione o papel adequado para a conta de serviço O último passo não necessita de nenhuma configuração específica. ","date":"2020-08-02","objectID":"/ligar-desligar-instancia-compute-engine-link/:2:0","tags":["Google Cloud"],"title":"Ligar e desligar instâncias do Google Compute Engine através de um link","uri":"/ligar-desligar-instancia-compute-engine-link/"},{"categories":null,"content":"Criar a Cloud Function Para criar essa Cloud Function, procure esse serviço no console e ative-o, se necesssário. Crie uma nova função, dando um nome e uma região. No tipo de trigger, selecione http e permita chamadas não autenticadas. Isso é potencialmente falho do ponto de vista da segurança, pois qualquer um que conheça a URL e os parâmetros de invocação da função será capaz de ligar/desligar suas máquinas. Configurações de *triggering* (invocação) da função Clique em configurações avançadas e defina a conta de serviço que acabou de ser criada: Defina a conta de serviço a ser usada pela Cloud Funtion No próximo passo selecione a linguagem da função como python e defina o ponto de entrada para main. Copie e cole o código da função e do arquivo requirements.txt. import googleapiclient.discovery compute = googleapiclient.discovery.build('compute', 'v1', cache_discovery=False) def main(request): \"\"\"Toggles compute engine instance start-stop \"\"\" project = request.args.get('project') zone = request.args.get('zone') instance_name = request.args.get('instance') # get current state instance = compute.instances().get(project=project, zone=zone, instance=instance_name).execute() # decide command if instance['status'] == \"TERMINATED\": compute.instances().start(project=project, zone=zone, instance=instance_name).execute() return \"{} turned on\".format(instance_name) else: compute.instances().stop(project=project, zone=zone, instance=instance_name).execute() return \"{} turned off\".format(instance_name) brotlipy==0.7.0 cachetools certifi==2020.6.20 cffi==1.14.0 chardet==3.0.4 cryptography google-api-core google-api-python-client google-auth google-auth-httplib2==0.0.3 googleapis-common-protos==1.51.0 httplib2 idna protobuf pyasn1==0.4.8 pyasn1-modules==0.2.7 pycparser pyOpenSSL==19.1.0 PySocks==1.7.1 pytz==2020.1 requests rsa simplejson six uritemplate==3.0.1 urllib3 Configuração da linguagem e ponto de entrada ","date":"2020-08-02","objectID":"/ligar-desligar-instancia-compute-engine-link/:3:0","tags":["Google Cloud"],"title":"Ligar e desligar instâncias do Google Compute Engine através de um link","uri":"/ligar-desligar-instancia-compute-engine-link/"},{"categories":null,"content":"Uso Para ativar a função basta agora chamá-la pelo seu link com os parâmetros necessários. https://{endereço da função}.cloudfunctions.net/{nome da função}?project={project id}\u0026zone={zona}\u0026instance={nome da instância} endereço da função e nome da função: é o endereço fornecido no momento em que você criou a Cloud Function project id: pode ser visto no dashboard do seu projeto: Encontrando a id do projeto zona e nome da instancia: podem ser vistos na página de resumo do Compute Engine Encontrando a id do projeto Agora é só salvar os links nos favoritos e pronto, não será mais necessário logar no Cloud Console toda vez que precisar ligar ou desligar uma instância. ","date":"2020-08-02","objectID":"/ligar-desligar-instancia-compute-engine-link/:4:0","tags":["Google Cloud"],"title":"Ligar e desligar instâncias do Google Compute Engine através de um link","uri":"/ligar-desligar-instancia-compute-engine-link/"},{"categories":null,"content":"Me encontre no Linkedin Github Ou me mande um email ","date":"2020-07-15","objectID":"/about/:0:0","tags":null,"title":"Sobre","uri":"/about/"}]